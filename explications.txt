// Le routerLink

Dans Angular, le routage permet de naviguer d'une vue à une autre sans recharger la page. Pour que le routage fonctionne, Angular doit connaître les chemins (routes) et les composants associés à ces chemins. Voici ce que nous avons fait :

Configuration des Routes : Nous avons défini un tableau routes qui associe des chemins à des composants. Cela indique à Angular quel composant charger lorsqu'un utilisateur navigue vers un chemin donné.

Initialisation du Routage : Dans une application Angular classique, le RouterModule est utilisé pour initialiser le routage, mais dans le mode standalone, nous utilisons provideRouter(routes) pour passer notre tableau de routes à la configuration de l'application Angular. Cela enregistre les routes avec le système de routage d'Angular.

Utilisation de routerLink : La directive routerLink permet de créer des liens de navigation dans les templates HTML. Pour l'utiliser dans un composant standalone, nous devons importer RouterLinkWithHref.

Navigation Programmée : Nous avons utilisé le service Router pour naviguer de manière programmée. Cela nous a permis de déclencher la navigation en réponse à des événements autres que les clics sur les liens, comme le clic sur un bouton.

Standalone Components : En mode standalone, chaque composant doit déclarer explicitement toutes ses dépendances. C'est pourquoi nous avons dû importer RouterLinkWithHref directement dans le NavbarComponent

//Explication du proxy de proxy.conf.json

{
  "/api": {
    "target": "https://pokeapi.co",
    "secure": false,
    "changeOrigin": true
  }
}
Explication :

"/api" : C'est le chemin d'accès pour lequel le proxy sera appliqué. Toutes les requêtes envoyées à votre serveur de développement Angular qui commencent par /api seront redirigées vers un autre serveur.

"target": "https://pokeapi.co" : Cela spécifie l'URL cible vers laquelle les requêtes commençant par /api seront redirigées. Dans votre cas, il s'agit de l'API PokeAPI.

"secure": false : Ce paramètre est utilisé pour indiquer si le proxy doit utiliser une connexion sécurisée (HTTPS). Dans certains cas, si vous proxy vers un serveur HTTPS, vous pourriez vouloir le mettre à true. Cependant, si vous rencontrez des problèmes de certificat SSL pendant le développement, vous pouvez le définir sur false.

"changeOrigin": true : Ce paramètre est crucial pour les requêtes CORS. Il modifie l'origine de l'hôte de la requête pour correspondre à la cible du proxy. Cela peut aider à éviter les problèmes liés aux restrictions de la politique de la même origine (same-origin policy).

Ce fichier est généralement utilisé en développement pour contourner les restrictions CORS ou pour simuler un environnement où le frontend et le backend sont servis depuis le même domaine.

//Accès aux Interfaces Définies dans le Même Fichier

interface : structure model de données dans notre exemple on decrit lobjet PokemonDetails 

Dans TypeScript, si vous définissez une interface dans un fichier, cette interface est accessible à toutes les classes et fonctions définies dans le même fichier. C'est pourquoi vous pouvez utiliser PokemonDetails directement dans les méthodes de PokemonService.

exemple : // pokemon.service.ts

interface PokemonDetails {
  // Structure de l'interface...
}

@Injectable({
  providedIn: 'root',
})
export class PokemonService {
  // ...

  getPokemonDetails(id: number): Observable<PokemonDetails> {
    // ...
  }

  // ...
}

En résumé, vous pouvez accéder à PokemonDetails dans PokemonService sans l'exporter car ils sont dans le même fichier. Si vous avez besoin de PokemonDetails en dehors de pokemon.service.ts, vous devez l'exporter et l'importer là où vous en avez besoin.


//Dans Pokemon-details-component :


this.pokemonService.getPokemonDetails(id).subscribe((data: any) => {
  this.pokemon = data;
  this.typesAsString = data.types
    .map((t: { type: { name: any } }) => t.type.name)
    .join(', ');
  console.log(data);
});

//Explication detaillé :

1.Appel de Service :

this.pokemonService.getPokemonDetails(id) : Cette ligne appelle la méthode getPokemonDetails de votre service PokemonService. Elle envoie une requête HTTP pour obtenir les détails d'un Pokémon spécifique, identifié par son id.

2.Observable et Souscription :

.subscribe((data: any) => { ... }) : Ici, vous vous abonnez à l'Observable retourné par getPokemonDetails. Les Observables sont un concept clé dans RxJS (une bibliothèque pour la programmation réactive en JavaScript). Ils représentent des flux de données asynchrones. Lorsque les données arrivent (dans ce cas, les détails du Pokémon), le code à l'intérieur de .subscribe est exécuté.
data: any : data est l'objet contenant les détails du Pokémon retournés par l'API. Le type any est utilisé ici pour une flexibilité maximale, mais dans un cas idéal, vous devriez définir un type plus spécifique pour une meilleure sécurité de type.

3.Traitement des Données :

this.pokemon = data; : Cette ligne stocke les données reçues dans la propriété pokemon du composant. Cela permet au template HTML du composant d'accéder et d'afficher ces données.
this.typesAsString = data.types.map((t: { type: { name: any } }) => t.type.name).join(', '); : Cette ligne transforme la liste des types du Pokémon en une chaîne de caractères. Chaque type est un objet dans data.types, et vous accédez au nom de chaque type avec t.type.name. La méthode .map() crée un nouveau tableau contenant uniquement les noms des types. Ensuite, .join(', ') concatène tous ces noms en une seule chaîne de caractères, séparés par des virgules.

4.Affichage des Données :

console.log(data); : Cette ligne affiche les données reçues dans la console du navigateur, ce qui est utile pour le débogage.
En résumé, ce bloc de code récupère les détails d'un Pokémon spécifique de l'API, traite ces données pour les rendre utilisables dans le template du composant, et affiche les données dans la console pour le débogage.


// exemple dans pokemon-detail.component.html

<div *ngIf="pokemon">
  <h2>{{ pokemon.name }}</h2>
  <img [src]="pokemon.sprites.front_default" alt="{{ pokemon.name }} Image" />
  <p>Type(s): {{ typesAsString }}</p>
</div>

// explication complète : 

*ngIf : Cette directive structurelle est utilisée pour conditionnellement afficher ou masquer un élément HTML. Dans ce cas, elle vérifie si la variable "pokemon" est définie avant d'afficher le contenu de la balise <div>. 

{{ pokemon.name }} : C'est une interpolation de données. Elle affiche le nom du Pokémon en utilisant la propriété "name" de l'objet "pokemon".

[src]="pokemon.sprites.front_default" : Cette syntaxe est utilisée pour lier dynamiquement la source de l'image à la propriété "sprites.front_default" de l'objet "pokemon". La source de l'image sera récupérée de manière dynamique à partir de cette propriété.

alt="{{ pokemon.name }} Image" : Cet attribut "alt" est utilisé pour fournir une description textuelle de l'image. Il utilise également l'interpolation de données pour inclure le nom du Pokémon dans la description.

{{ typesAsString }} : Ici, nous affichons les types du Pokémon en utilisant la variable "typesAsString". Cette variable doit être définie dans le composant TypeScript et contiendra une chaîne de caractères représentant les types du Pokémon.

Assurez-vous que la variable "pokemon" et la variable "typesAsString" sont correctement initialisées dans le composant TypeScript pour que ce modèle HTML fonctionne correctement.



// dans pokemon.service.ts  Méthode pour obtenir tous les détails des Pokémon (données) + explication 


getAllPokemonDetails(): Observable<Pokemon[]> {
  return this.getPokemonList().pipe(
    switchMap((pokemonListData) => {
      // Création d'un tableau de requêtes pour obtenir les détails de chaque Pokémon.
      const results = pokemonListData.results.map((pokemon) => {
        // Obtention de l'ID du Pokémon à partir de l'URL de l'API.
        const pokemonId = this.getPokemonIdFromUrl(pokemon.url);

        // Appel à la méthode getPokemonDetails() pour obtenir les détails du Pokémon.
        return this.getPokemonDetails(pokemonId).pipe(
          map((details) => ({
            // Mapping des détails du Pokémon dans un objet Pokemon.
            id: pokemonId, // ID du Pokémon
            name: details.name, // Nom du Pokémon
            image: details.sprites.front_default, // URL de l'image du Pokémon
            types: details.types.map((type) => type.type.name), // Types du Pokémon
          }))
        );
      });

      // Exécution de toutes les requêtes en parallèle.
      return forkJoin(results);
    })
  );
}


//Explication ligne par ligne :

getAllPokemonDetails(): Observable<Pokemon[]> { : Ceci est la signature de la méthode. Elle retourne un Observable qui émettra un tableau de Pokémon une fois que les détails de tous les Pokémon auront été obtenus.

return this.getPokemonList().pipe( : Nous commençons par appeler la méthode getPokemonList() pour obtenir la liste de tous les Pokémon depuis l'API Pokémon. Nous utilisons pipe pour enchaîner des opérateurs RxJS.

switchMap((pokemonListData) => { : Nous utilisons switchMap pour passer à une autre Observable. Dans ce cas, nous recevons la liste des Pokémon depuis la première requête.

const results = pokemonListData.results.map((pokemon) => { : Nous parcourons la liste des résultats pour chaque Pokémon. pokemon représente un Pokémon individuel dans cette boucle.

const pokemonId = this.getPokemonIdFromUrl(pokemon.url); : Nous utilisons la méthode getPokemonIdFromUrl() pour extraire l'ID du Pokémon à partir de son URL. Cela nous permettra d'obtenir les détails spécifiques de ce Pokémon.

return this.getPokemonDetails(pokemonId).pipe( : Nous appelons la méthode getPokemonDetails() avec l'ID du Pokémon pour obtenir ses détails. Nous utilisons pipe pour enchainer d'autres opérations sur l'Observable résultant.

map((details) => ({ : Nous utilisons map pour mapper les détails du Pokémon en un objet plus simple et lisible.

id: pokemonId, : Nous ajoutons l'ID du Pokémon à l'objet résultant.

name: details.name, : Nous ajoutons le nom du Pokémon.

image: details.sprites.front_default, : Nous ajoutons l'URL de l'image du Pokémon à partir des détails.

types: details.types.map((type) => type.type.name), : Nous ajoutons les types du Pokémon en les extrayant des détails et en les convertissant en un tableau de noms de types.

})) : Nous terminons la partie map et renvoyons l'objet résultant pour chaque Pokémon.

); : Nous terminons la requête pour obtenir les détails d'un Pokémon.

return forkJoin(results); : Enfin, nous utilisons forkJoin pour exécuter toutes les requêtes en parallèle et obtenir les détails de tous les Pokémon en une seule réponse.


//Pagination pokemon list dans PokemonListComponent

1.Initialisation des données dans ngOnInit() : Au moment de la création du composant (ngOnInit), les données des Pokémon sont chargées en utilisant this.pokemonService.getAllPokemonDetails(). Ensuite, nous appelons this.paginatePokemonList() pour paginer les données dès le début.

2.Méthode paginatePokemonList() : Cette méthode calcule quels Pokémon doivent être affichés sur la page courante. Elle utilise this.currentPage pour déterminer la page actuelle, this.pageSize pour le nombre de Pokémon par page, et this.pokemonList pour obtenir toutes les données des Pokémon. Ensuite, elle stocke les Pokémon à afficher dans this.paginatedPokemon et calcule également le nombre total de pages (this.totalPages).

3.Méthodes previousPage() et nextPage() : Ces méthodes gèrent la pagination. Lorsque vous cliquez sur "Précédent" (previousPage()), elles vérifient d'abord si vous êtes déjà sur la première page (this.currentPage === 1). Si ce n'est pas le cas, elles décrémentent this.currentPage d'une unité et appellent this.paginatePokemonList() pour mettre à jour la liste paginée. De même, lorsque vous cliquez sur "Suivant" (nextPage()), elles vérifient si vous êtes déjà sur la dernière page (this.currentPage === this.totalPages) ; si ce n'est pas le cas, elles incrémente this.currentPage d'une unité et appellent this.paginatePokemonList() pour mettre à jour la liste paginée.

4.Boutons "Précédent" et "Suivant" : Les boutons "Précédent" et "Suivant" sont maintenant correctement activés et désactivés en fonction de la page actuelle. Le bouton "Précédent" est désactivé sur la première page ([disabled]="currentPage === 1") car il n'y a pas de page précédente, et le bouton "Suivant" est désactivé sur la dernière page ([disabled]="currentPage === totalPages") car il n'y a pas de page suivante.

5.Template HTML : Le template HTML n'a pas été modifié, mais il est important de noter que le contenu de *ngFor utilise maintenant paginatedPokemon au lieu de pokemonList, ce qui garantit que seuls les Pokémon de la page courante sont affichés.

